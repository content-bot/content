b'version: 2\njobs:\n  build:\n    docker:\n      - image: devdemisto/content-build:3.0.0.3368  # disable-secrets-detection\n    environment:\n      CONTENT_VERSION: "9999999"\n      SERVER_VERSION: "5.0.0"\n      GIT_SHA1: "c71c44b82996fdb0886bd667021b37b9bbd91d21" # guardrails-disable-line disable-secrets-detection\n    steps:\n      - checkout\n      - setup_remote_docker\n      - restore_cache:\n          key: venv-{{ checksum "dev-requirements-py2.txt" }}-{{ checksum "dev-requirements-py3.txt" }}-{{ checksum ".circleci/build-requirements.txt" }}\n      - run:\n          name: Prepare Environment\n          when: always\n          command: |\n              echo \'export CIRCLE_ARTIFACTS="/home/circleci/project/artifacts"\' >> $BASH_ENV\n              echo \'export PATH="/home/circleci/.local/bin:${PATH}"\' >> $BASH_ENV # disable-secrets-detection\n              echo \'export PYTHONPATH="/home/circleci/project:${PYTHONPATH}"\' >> $BASH_ENV\n              echo "=== sourcing $BASH_ENV ==="\n              source $BASH_ENV\n              sudo mkdir -p -m 777 $CIRCLE_ARTIFACTS\n              chmod +x ./Tests/scripts/*\n              chmod +x ./Tests/lastest_server_build_scripts/*\n              echo "Parameters: NIGHTLY: $NIGHTLY, NON_AMI_RUN: $NON_AMI_RUN, SERVER_BRANCH_NAME: $SERVER_BRANCH_NAME"\n              if [ ! -e "venv" ]; then\n                echo "installing venv"\n                NO_HOOKS=1 .hooks/bootstrap\n                source ./venv/bin/activate\n                pip install -r .circleci/build-requirements.txt\n                pip3 install -r .circleci/build-requirements.txt\n              else\n                echo "venv exists (from cache). activating"\n                source ./venv/bin/activate\n              fi\n              # store in bash env so we load our venv in each step\n              echo \'source /home/circleci/project/venv/bin/activate\' >> $BASH_ENV\n              python --version\n              python3 --version\n      - save_cache:\n          paths:\n            - venv\n          key: venv-{{ checksum "dev-requirements-py2.txt" }}-{{ checksum "dev-requirements-py3.txt" }}-{{ checksum ".circleci/build-requirements.txt" }}\n\n      - add_ssh_keys:\n          fingerprints:\n              - "02:df:a5:6a:53:9a:f5:5d:bd:a6:fc:b2:db:9b:c9:47" # disable-secrets-detection\n              - "f5:25:6a:e5:ac:4b:84:fb:60:54:14:82:f1:e9:6c:f9" # disable-secrets-detection\n      - run:\n          name: Create ID Set\n          when: always\n          command: |\n            python ./Tests/scripts/update_id_set.py -r\n      - run:\n          name: Infrastucture testing\n          when: always\n          command: |\n            python -m pytest ./Tests/scripts/hook_validations/tests/ -v\n            python -m pytest ./Tests/scripts/infrastructure_tests/ -v\n            python -m pytest ./Tests/scripts/test_configure_tests.py -v\n      - run:\n          name: Validate Files and Yaml\n          when: always\n          command: |\n              # Run flake8 on all excluding Integraions and Scripts (they will be handled in linting)\n              ./Tests/scripts/pyflake.sh *.py\n              find . -maxdepth 1 -type d -not \\( -path . -o -path ./Integrations -o -path ./Scripts -o -path ./Beta_Integrations -o -path ./venv \\) | xargs ./Tests/scripts/pyflake.sh\n              [ -n "${BACKWARD_COMPATIBILITY}" ] && CHECK_BACKWARD=false || CHECK_BACKWARD=true\n              python ./Tests/scripts/validate_files.py -c true -b $CHECK_BACKWARD\n      - run:\n          name: Configure Test Filter\n          when: always\n          command: |\n              [ -n "${NIGHTLY}" ] && IS_NIGHTLY=true || IS_NIGHTLY=false\n              python ./Tests/scripts/configure_tests.py -n $IS_NIGHTLY\n      - run:\n          name: Spell Checks\n          command: |\n            python ./Tests/scripts/circleci_spell_checker.py $CIRCLE_BRANCH\n      - run:\n          name: Build Content Descriptor\n          when: always\n          command: |\n            if [ -n "${GITHUB_TOKEN}" ] ;\n              then\n                python3 release_notes.py $CONTENT_VERSION $GIT_SHA1 $CIRCLE_BUILD_NUM $SERVER_VERSION --github-token $GITHUB_TOKEN\n              else\n                python3 release_notes.py $CONTENT_VERSION $GIT_SHA1 $CIRCLE_BUILD_NUM $SERVER_VERSION\n            fi\n      - run:\n          name: Common Server Documentation\n          when: always\n          command: ./Documentation/commonServerDocs.sh\n      - run:\n          name: Create Content Artifacts\n          when: always\n          command: python content_creator.py $CIRCLE_ARTIFACTS\n      - store_artifacts:\n          path: artifacts\n          destination: artifacts\n      - run:\n          name: Run Unit Testing and Lint\n          when: always\n          command: SKIP_GIT_COMPARE_FILTER=${NIGHTLY} ./Tests/scripts/run_all_pkg_dev_tasks.sh\n      - run:\n          name: Verify Base Branch for Contirbution\n          when: always\n          command: |\n            if [[ $CIRCLE_BRANCH =~ pull/[0-9]+ ]] ;\n              then\n                python ./Tests/scripts/verify_base_branch_for_contribution.py $CIRCLE_BRANCH\n            fi\n      - run:\n          name: Download Artifacts\n          when: always\n          command: |\n            if [[ $CIRCLE_BRANCH =~ pull/[0-9]+ ]]; then\n              echo "Skipping instance tests for forked PRs"\n              exit 0\n            fi\n            if ./Tests/scripts/is_ami.sh ;\n              then\n                echo "Using AMI - Not downloading artifacts"\n              else\n                ./Tests/scripts/server_get_artifact.sh $SERVER_CI_TOKEN\n                cp demistoserver.sh ./Tests/scripts/awsinstancetool/ansibleinstall/demistoserver.sh\n            fi\n      - run:\n          name: Download Configuration\n          when: always\n          command: |\n            # if [[ $CIRCLE_BRANCH =~ pull/[0-9]+ ]]; then\n            #   echo "Skipping instance tests for forked PRs"\n            #   exit 0\n            # fi\n            # if ./Tests/scripts/is_ami.sh ;\n            #   then\n            #     ./Tests/scripts/download_demisto_conf.sh\n            #   else\n            #     ./Tests/lastest_server_build_scripts/download_demisto_conf.sh\n            # fi\n            exit 0\n      - run:\n          name: Create Instance\n          when: always\n          command: |\n            # if [[ $CIRCLE_BRANCH =~ pull/[0-9]+ ]]; then\n            #   echo "Skipping instance tests for forked PRs"\n            #   exit 0\n            # fi\n            # if ./Tests/scripts/is_ami.sh ;\n            #   then\n            #     if [ -n "${NIGHTLY}" ] ;\n            #       then\n            #         export IFRA_ENV_TYPE=Content-Master\n            #       else\n            #         export IFRA_ENV_TYPE=Content-Env\n            #     fi\n            #     python ./Tests/scripts/awsinstancetool/aws_instance_tool.py -envType $IFRA_ENV_TYPE -outfile ./env_results.json\n            #   else\n            #     python ./Tests/scripts/awsinstancetool/aws_instance_tool.py -envType CustomBuild -outfile ./env_results.json\n            # fi\n            exit 0\n      - run:\n          name: Setup Instance\n          when: always\n          command: |\n            # if [[ $CIRCLE_BRANCH =~ pull/[0-9]+ ]]; then\n            #   echo "Skipping instance tests for forked PRs"\n            #   exit 0\n            # fi\n            # if ./Tests/scripts/is_ami.sh ;\n            #   then\n            #     python ./Tests/scripts/run_content_installation.py\n            #     python ./Tests/scripts/wait_until_server_ready.py -c $(cat secret_conf_path) -v $CONTENT_VERSION\n            #   else\n            #     ./Tests/lastest_server_build_scripts/run_installer_on_instance.sh\n            #     python ./Tests/scripts/wait_until_server_ready.py -c $(cat secret_conf_path) -v $CONTENT_VERSION --non-ami\n            # fi\n            exit 0\n      - run:\n          name: Run Tests - Latest GA\n          shell: /bin/bash\n          when: always\n          command: |\n            # if [[ $CIRCLE_BRANCH =~ pull/[0-9]+ ]]; then\n            #   echo "Skipping instance tests for forked PRs"\n            #   exit 0\n            # fi\n            # if ./Tests/scripts/is_ami.sh ;\n            #   then\n            #     ./Tests/scripts/run_tests.sh "Demisto GA"\n            #   else\n            #     ./Tests/lastest_server_build_scripts/run_tests.sh\n            # fi\n            exit 0\n      - run:\n          name: Run Tests - One Before GA\n          shell: /bin/bash\n          when: always\n          command: |\n            # if [[ $CIRCLE_BRANCH =~ pull/[0-9]+ ]]; then\n            #   echo "Skipping instance tests for forked PRs"\n            #   exit 0\n            # fi\n            # if ./Tests/scripts/is_ami.sh ;\n            #   then\n            #     ./Tests/scripts/run_tests.sh "Demisto one before GA"\n            #   else\n            #     echo "Not AMI run, can\'t run on this version"\n            # fi\n            exit 0\n      - run:\n          name: Run Tests - Two Before GA\n          shell: /bin/bash\n          when: always\n          command: |\n            # if [[ $CIRCLE_BRANCH =~ pull/[0-9]+ ]]; then\n            #   echo "Skipping instance tests for forked PRs"\n            #   exit 0\n            # fi\n            # if ./Tests/scripts/is_ami.sh ;\n            #   then\n            #     ./Tests/scripts/run_tests.sh "Demisto two before GA"\n            #   else\n            #     echo "Not AMI run, can\'t run on this version"\n            # fi\n            exit 0\n      - run:\n          name: Run Tests - Server Master\n          shell: /bin/bash\n          when: always\n          command: |\n            # if [[ $CIRCLE_BRANCH =~ pull/[0-9]+ ]]; then\n            #   echo "Skipping instance tests for forked PRs"\n            #   exit 0\n            # fi\n            # if ./Tests/scripts/is_ami.sh ;\n            #   then\n            #     ./Tests/scripts/run_tests.sh "Server Master"\n            #     export RETVAL=$?\n            #     cp ./Tests/failed_tests.txt $CIRCLE_ARTIFACTS/failed_tests.txt\n            #     exit $RETVAL\n            # else\n            #     echo "Not AMI run, can\'t run on this version"\n            # fi\n            exit 0\n      - store_artifacts:\n          path: artifacts\n          destination: artifacts\n          when: always\n      - run:\n          name: Slack Notifier\n          shell: /bin/bash\n          command: |\n            if [[ $CIRCLE_BRANCH =~ pull/[0-9]+ ]]; then\n              echo "Skipping instance tests for forked PRs"\n              exit 0\n            fi\n            ./Tests/scripts/slack_notifier.sh ./env_results.json\n          when: always\n      - run:\n          name: Validate Docker Images\n          shell: /bin/bash\n          command: ./Tests/scripts/validate_docker_images.sh\n          when: always\n      - run:\n          name: Instance Test\n          command: |\n            # if [[ $CIRCLE_BRANCH =~ pull/[0-9]+ ]]; then\n            #   echo "Skipping instance tests for forked PRs"\n            #   exit 0\n            # fi\n            # ./Tests/scripts/instance_test.sh\n            exit 0\n          when: always\n      - run:\n          name: Destroy Instances\n          command: |\n            # if [[ $CIRCLE_BRANCH =~ pull/[0-9]+ ]]; then\n            #   echo "Skipping instance tests for forked PRs"\n            #   exit 0\n            # fi\n            # python ./Tests/scripts/destroy_instances.py $CIRCLE_ARTIFACTS ./env_results.json\n            # export PSWD=$(jq .serverLogsZipPassword < $(cat secret_conf_path) | cut -d \\" -f 2)\n            # zip -P $PSWD $CIRCLE_ARTIFACTS/ServerLogs.zip $CIRCLE_ARTIFACTS/server*.log\n            # rm -f $CIRCLE_ARTIFACTS/server*.log\n            exit 0\n          when: always\n      - store_artifacts:\n          path: artifacts\n          destination: artifacts\n          when: always\n\nworkflows:\n  version: 2\n  commit:\n    jobs:\n      - build'