jobs:
  build:
    docker:
    - image: devdemisto/content-build:3.0.0.3368
    environment:
      CONTENT_VERSION: '9999999'
      GIT_SHA1: c71c44b82996fdb0886bd667021b37b9bbd91d21
      SERVER_VERSION: 5.0.0
    steps:
    - checkout
    - setup_remote_docker
    - restore_cache:
        key: venv-{{ checksum "dev-requirements-py2.txt" }}-{{ checksum "dev-requirements-py3.txt"
          }}-{{ checksum ".circleci/build-requirements.txt" }}
    - run:
        command: "echo 'export CIRCLE_ARTIFACTS=\"/home/circleci/project/artifacts\"\
          ' >> $BASH_ENV\necho 'export PATH=\"/home/circleci/.local/bin:${PATH}\"\
          ' >> $BASH_ENV # disable-secrets-detection\necho 'export PYTHONPATH=\"/home/circleci/project:${PYTHONPATH}\"\
          ' >> $BASH_ENV\necho \"=== sourcing $BASH_ENV ===\"\nsource $BASH_ENV\n\
          sudo mkdir -p -m 777 $CIRCLE_ARTIFACTS\nchmod +x ./Tests/scripts/*\nchmod\
          \ +x ./Tests/lastest_server_build_scripts/*\necho \"Parameters: NIGHTLY:\
          \ $NIGHTLY, NON_AMI_RUN: $NON_AMI_RUN, SERVER_BRANCH_NAME: $SERVER_BRANCH_NAME\"\
          \nif [ ! -e \"venv\" ]; then\n  echo \"installing venv\"\n  NO_HOOKS=1 .hooks/bootstrap\n\
          \  source ./venv/bin/activate\n  pip install -r .circleci/build-requirements.txt\n\
          \  pip3 install -r .circleci/build-requirements.txt\nelse\n  echo \"venv\
          \ exists (from cache). activating\"\n  source ./venv/bin/activate\nfi\n\
          # store in bash env so we load our venv in each step\necho 'source /home/circleci/project/venv/bin/activate'\
          \ >> $BASH_ENV\npython --version\npython3 --version\n"
        name: Prepare Environment
        when: always
    - save_cache:
        key: venv-{{ checksum "dev-requirements-py2.txt" }}-{{ checksum "dev-requirements-py3.txt"
          }}-{{ checksum ".circleci/build-requirements.txt" }}
        paths:
        - venv
    - add_ssh_keys:
        fingerprints:
        - 02:df:a5:6a:53:9a:f5:5d:bd:a6:fc:b2:db:9b:c9:47
        - f5:25:6a:e5:ac:4b:84:fb:60:54:14:82:f1:e9:6c:f9
    - run:
        command: 'python ./Tests/scripts/update_id_set.py -r

          '
        name: Create ID Set
        when: always
    - run:
        command: 'python -m pytest ./Tests/scripts/hook_validations/tests/ -v

          python -m pytest ./Tests/scripts/infrastructure_tests/ -v

          python -m pytest ./Tests/scripts/test_configure_tests.py -v

          '
        name: Infrastucture testing
        when: always
    - run:
        command: '# Run flake8 on all excluding Integraions and Scripts (they will
          be handled in linting)

          ./Tests/scripts/pyflake.sh *.py

          find . -maxdepth 1 -type d -not \( -path . -o -path ./Integrations -o -path
          ./Scripts -o -path ./Beta_Integrations -o -path ./venv \) | xargs ./Tests/scripts/pyflake.sh

          [ -n "${BACKWARD_COMPATIBILITY}" ] && CHECK_BACKWARD=false || CHECK_BACKWARD=true

          python ./Tests/scripts/validate_files.py -c true -b $CHECK_BACKWARD

          '
        name: Validate Files and Yaml
        when: always
    - run:
        command: '[ -n "${NIGHTLY}" ] && IS_NIGHTLY=true || IS_NIGHTLY=false

          python ./Tests/scripts/configure_tests.py -n $IS_NIGHTLY

          '
        name: Configure Test Filter
        when: always
    - run:
        command: 'python ./Tests/scripts/circleci_spell_checker.py $CIRCLE_BRANCH

          '
        name: Spell Checks
    - run:
        command: "if [ -n \"${GITHUB_TOKEN}\" ] ;\n  then\n    python3 release_notes.py\
          \ $CONTENT_VERSION $GIT_SHA1 $CIRCLE_BUILD_NUM $SERVER_VERSION --github-token\
          \ $GITHUB_TOKEN\n  else\n    python3 release_notes.py $CONTENT_VERSION $GIT_SHA1\
          \ $CIRCLE_BUILD_NUM $SERVER_VERSION\nfi\n"
        name: Build Content Descriptor
        when: always
    - run:
        command: ./Documentation/commonServerDocs.sh
        name: Common Server Documentation
        when: always
    - run:
        command: python content_creator.py $CIRCLE_ARTIFACTS
        name: Create Content Artifacts
        when: always
    - store_artifacts:
        destination: artifacts
        path: artifacts
    - run:
        command: SKIP_GIT_COMPARE_FILTER=${NIGHTLY} ./Tests/scripts/run_all_pkg_dev_tasks.sh
        name: Run Unit Testing and Lint
        when: always
    - run:
        command: "if [[ $CIRCLE_BRANCH =~ pull/[0-9]+ ]] ;\n  then\n    python ./Tests/scripts/verify_base_branch_for_contribution.py\
          \ $CIRCLE_BRANCH\nfi\n"
        name: Verify Base Branch for Contirbution
        when: always
    - run:
        command: "if [[ $CIRCLE_BRANCH =~ pull/[0-9]+ ]]; then\n  echo \"Skipping\
          \ instance tests for forked PRs\"\n  exit 0\nfi\nif ./Tests/scripts/is_ami.sh\
          \ ;\n  then\n    echo \"Using AMI - Not downloading artifacts\"\n  else\n\
          \    ./Tests/scripts/server_get_artifact.sh $SERVER_CI_TOKEN\n    cp demistoserver.sh\
          \ ./Tests/scripts/awsinstancetool/ansibleinstall/demistoserver.sh\nfi\n"
        name: Download Artifacts
        when: always
    - run:
        command: '# if [[ $CIRCLE_BRANCH =~ pull/[0-9]+ ]]; then

          #   echo "Skipping instance tests for forked PRs"

          #   exit 0

          # fi

          # if ./Tests/scripts/is_ami.sh ;

          #   then

          #     ./Tests/scripts/download_demisto_conf.sh

          #   else

          #     ./Tests/lastest_server_build_scripts/download_demisto_conf.sh

          # fi

          exit 0

          '
        name: Download Configuration
        when: always
    - run:
        command: '# if [[ $CIRCLE_BRANCH =~ pull/[0-9]+ ]]; then

          #   echo "Skipping instance tests for forked PRs"

          #   exit 0

          # fi

          # if ./Tests/scripts/is_ami.sh ;

          #   then

          #     if [ -n "${NIGHTLY}" ] ;

          #       then

          #         export IFRA_ENV_TYPE=Content-Master

          #       else

          #         export IFRA_ENV_TYPE=Content-Env

          #     fi

          #     python ./Tests/scripts/awsinstancetool/aws_instance_tool.py -envType
          $IFRA_ENV_TYPE -outfile ./env_results.json

          #   else

          #     python ./Tests/scripts/awsinstancetool/aws_instance_tool.py -envType
          CustomBuild -outfile ./env_results.json

          # fi

          exit 0

          '
        name: Create Instance
        when: always
    - run:
        command: '# if [[ $CIRCLE_BRANCH =~ pull/[0-9]+ ]]; then

          #   echo "Skipping instance tests for forked PRs"

          #   exit 0

          # fi

          # if ./Tests/scripts/is_ami.sh ;

          #   then

          #     python ./Tests/scripts/run_content_installation.py

          #     python ./Tests/scripts/wait_until_server_ready.py -c $(cat secret_conf_path)
          -v $CONTENT_VERSION

          #   else

          #     ./Tests/lastest_server_build_scripts/run_installer_on_instance.sh

          #     python ./Tests/scripts/wait_until_server_ready.py -c $(cat secret_conf_path)
          -v $CONTENT_VERSION --non-ami

          # fi

          exit 0

          '
        name: Setup Instance
        when: always
    - run:
        command: '# if [[ $CIRCLE_BRANCH =~ pull/[0-9]+ ]]; then

          #   echo "Skipping instance tests for forked PRs"

          #   exit 0

          # fi

          # if ./Tests/scripts/is_ami.sh ;

          #   then

          #     ./Tests/scripts/run_tests.sh "Demisto GA"

          #   else

          #     ./Tests/lastest_server_build_scripts/run_tests.sh

          # fi

          exit 0

          '
        name: Run Tests - Latest GA
        shell: /bin/bash
        when: always
    - run:
        command: '# if [[ $CIRCLE_BRANCH =~ pull/[0-9]+ ]]; then

          #   echo "Skipping instance tests for forked PRs"

          #   exit 0

          # fi

          # if ./Tests/scripts/is_ami.sh ;

          #   then

          #     ./Tests/scripts/run_tests.sh "Demisto one before GA"

          #   else

          #     echo "Not AMI run, can''t run on this version"

          # fi

          exit 0

          '
        name: Run Tests - One Before GA
        shell: /bin/bash
        when: always
    - run:
        command: '# if [[ $CIRCLE_BRANCH =~ pull/[0-9]+ ]]; then

          #   echo "Skipping instance tests for forked PRs"

          #   exit 0

          # fi

          # if ./Tests/scripts/is_ami.sh ;

          #   then

          #     ./Tests/scripts/run_tests.sh "Demisto two before GA"

          #   else

          #     echo "Not AMI run, can''t run on this version"

          # fi

          exit 0

          '
        name: Run Tests - Two Before GA
        shell: /bin/bash
        when: always
    - run:
        command: '# if [[ $CIRCLE_BRANCH =~ pull/[0-9]+ ]]; then

          #   echo "Skipping instance tests for forked PRs"

          #   exit 0

          # fi

          # if ./Tests/scripts/is_ami.sh ;

          #   then

          #     ./Tests/scripts/run_tests.sh "Server Master"

          #     export RETVAL=$?

          #     cp ./Tests/failed_tests.txt $CIRCLE_ARTIFACTS/failed_tests.txt

          #     exit $RETVAL

          # else

          #     echo "Not AMI run, can''t run on this version"

          # fi

          exit 0

          '
        name: Run Tests - Server Master
        shell: /bin/bash
        when: always
    - store_artifacts:
        destination: artifacts
        path: artifacts
        when: always
    - run:
        command: "if [[ $CIRCLE_BRANCH =~ pull/[0-9]+ ]]; then\n  echo \"Skipping\
          \ instance tests for forked PRs\"\n  exit 0\nfi\n./Tests/scripts/slack_notifier.sh\
          \ ./env_results.json\n"
        name: Slack Notifier
        shell: /bin/bash
        when: always
    - run:
        command: ./Tests/scripts/validate_docker_images.sh
        name: Validate Docker Images
        shell: /bin/bash
        when: always
    - run:
        command: '# if [[ $CIRCLE_BRANCH =~ pull/[0-9]+ ]]; then

          #   echo "Skipping instance tests for forked PRs"

          #   exit 0

          # fi

          # ./Tests/scripts/instance_test.sh

          exit 0

          '
        name: Instance Test
        when: always
    - run:
        command: '# if [[ $CIRCLE_BRANCH =~ pull/[0-9]+ ]]; then

          #   echo "Skipping instance tests for forked PRs"

          #   exit 0

          # fi

          # python ./Tests/scripts/destroy_instances.py $CIRCLE_ARTIFACTS ./env_results.json

          # export PSWD=$(jq .serverLogsZipPassword < $(cat secret_conf_path) | cut
          -d \" -f 2)

          # zip -P $PSWD $CIRCLE_ARTIFACTS/ServerLogs.zip $CIRCLE_ARTIFACTS/server*.log

          # rm -f $CIRCLE_ARTIFACTS/server*.log

          exit 0

          '
        name: Destroy Instances
        when: always
    - store_artifacts:
        destination: artifacts
        path: artifacts
        when: always
version: 2
workflows:
  commit:
    jobs:
    - build
  version: 2
